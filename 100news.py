import MySQLdb
import MySQLdb.cursors
from openai import OpenAI
from dotenv import load_dotenv
import os
import datetime
import requests
import re
import time


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
def format_for_telegram(text):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    –∏—Å–ø–æ–ª—å–∑—É—è HTML —Ä–∞–∑–º–µ—Ç–∫—É –∏ —ç–º–æ–¥–∑–∏.
    """
    if not text:
        return text

    # –ó–∞–º–µ–Ω—è–µ–º –ª—é–±–æ–µ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ HTML
    # –ó–∞–º–µ–Ω—è–µ–º ** –Ω–∞ <b> —Ç–µ–≥ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = re.sub(r'\*\*([^*]+)\*\*', r'<b>\1</b>', text)
    # –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ <i> —Ç–µ–≥ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞
    text = re.sub(r'\*([^*]+)\*', r'<i>\1</i>', text)
    # –ó–∞–º–µ–Ω—è–µ–º ` –Ω–∞ <code> —Ç–µ–≥ –¥–ª—è –∫–æ–¥–∞
    text = re.sub(r'`([^`]+)`', r'<code>\1</code>', text)

    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø–∞–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    emojis = {
        # –û–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üì¢",
        "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "‚ùì",
        "–∏–Ω—Å–∞–π–¥—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞": "üîç",
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": "üìä",
        "—Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏": "üí∞",
        "–ø—Ä–æ–≥–Ω–æ–∑—ã": "üîÆ",
        "–æ–±—É—á–µ–Ω–∏–µ": "üìö",

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
        "—Ä–æ—Å—Ç": "üìà",
        "–ø–∞–¥–µ–Ω–∏–µ": "üìâ",
        "–±–∏—Ç–∫–æ–∏–Ω": "‚Çø",
        "btc": "‚Çø",
        "bitcoin": "‚Çø",
        "ethereum": "Œû",
        "eth": "Œû",
        "–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ": "ü§ù",
        "–∑–∞–ø—É—Å–∫": "üöÄ",
        "–ª–∏—Å—Ç–∏–Ω–≥": "üìã",
        "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "‚öñÔ∏è",
        "–≤–∑–ª–æ–º": "üîì",
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "üîí",
        "–∑–∞–∫–æ–Ω": "üìú",
        "—Å—É–¥": "‚öñÔ∏è",
        "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ": "‚ö†Ô∏è",
        "–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "üö®",
        "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "üíµ",
        "–¥–æ—Ö–æ–¥": "üí∏",
        "–∫–æ—à–µ–ª–µ–∫": "üëõ",
        "–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è": "‚ú®",
        "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "üîÑ",
        "—É—Å–ø–µ—Ö": "‚úÖ",
        "–ø—Ä–æ–≤–∞–ª": "‚ùå",
        "–≤–Ω–∏–º–∞–Ω–∏–µ": "üëÄ",
        "–≤–∞–∂–Ω–æ": "‚ÄºÔ∏è",
        "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏": "üí°",
        "–ø–ª–∞—Ç–µ–∂–∏": "üí≥",
        "nft": "üñºÔ∏è",
        "defi": "üè¶",
        "–º–∞–π–Ω–∏–Ω–≥": "‚õèÔ∏è",
        "staking": "ü•©",
        "–∫–æ–º–∏—Å—Å–∏—è": "üí≤",
        "—Ö–∞–ª–≤–∏–Ω–≥": "‚úÇÔ∏è",
        "—Ç–æ–∫–µ–Ω": "ü™ô",
        "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å": "üíß",
        "–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å": "üé¢"
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ (–¥–µ–ª–∞–µ–º –∏—Ö –∂–∏—Ä–Ω—ã–º–∏)
    for section in ["–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", "–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", "–ò–Ω—Å–∞–π–¥—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã", "–û–±—É—á–µ–Ω–∏–µ"]:
        if section in text:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏
            section_emoji = ""
            for key, emoji in emojis.items():
                if key.lower() in section.lower():
                    section_emoji = emoji
                    break

            if not section_emoji and "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π" in section.lower():
                section_emoji = emojis["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"]

            # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            formatted_section = f"\n<b>{section_emoji} {section}</b>\n"
            text = text.replace(f"- {section}:", formatted_section)
            text = text.replace(f"{section}:", formatted_section)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    lines = text.split('\n')
    in_section = False
    for i in range(len(lines)):
        line = lines[i].strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line:
            continue

        # –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        if line.startswith("<b>"):
            in_section = True
            continue

        # –ï—Å–ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "- "
        if in_section and line.startswith("- "):
            # –£–±–∏—Ä–∞–µ–º "- " –∏ –¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
            headline = line[2:].strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
            headline_emoji = ""
            for keyword, emoji in emojis.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                if keyword.lower() in headline.lower():
                    headline_emoji += emoji + " "

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∏—Ä–Ω—ã–º
            lines[i] = f"<b>{headline_emoji}{headline}</b>"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏: –∏—â–µ–º URL –≤ —Ç–µ–∫—Å—Ç–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö
        if "http" in line:
            # –ò—â–µ–º URL —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            url_pattern = r'https?://[^\s]+'
            urls = re.findall(url_pattern, line)

            for url in urls:
                # –ï—Å–ª–∏ URL –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏, –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
                if line.strip().endswith(url):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ URL
                    text_before_url = line[:line.rfind(url)].strip()
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É
                    lines[i] = f"{text_before_url}\n{url}"

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
    formatted_text = '\n'.join(lines)

    return formatted_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
def build_prompt(tweets_text, covered_news):
    prompt = """
    You receive a list of tweets from crypto industry experts.
    Each tweet is given as a pair: url, tweet_text.

    You also receive a list of news headlines that have already been covered today.

    Your task is to analyze the tweets, filter, summarize, and present only original, meaningful, market-relevant messages in Russian. Strictly follow these criteria:

    FILTERING:
    - DO NOT include any tweet if its content (the event, news, or main idea) matches or duplicates any news already covered today from the provided list.
    - EXCLUDE any tweet that:
        - Contains advertising, referral, or promotional material; calls to retweet, like, follow, join chats, giveaways, airdrops, quick profit promises, NFT/token launches, or similar.
        - Lacks concrete information ‚Äî only expresses emotions, memes, greetings, thanks, off-topic chatter or reactions such as "to the moon!", "HODL", "soon", "big news coming", etc.
        - Is just a link, or a very brief clickbait/repetitive promotional comment, personal conversation, meme, or generic reaction (user mentions, gifs, inside jokes).
        - Is just a news headline, clickbait, or rhetorical question about a potential event/result without facts, clear analysis or new information (e.g., "Is Bitcoin about to rally?", "XRP through the roof?", "Will Ethereum collapse soon?", etc.).
        - Is only a repost or rephrasing of a media headline without meaningful details, specific facts, analysis, or context.
        - Does not deliver meaningful content: no new data, analysis, fact, forecast, educational or market-related value.
        - Duplicates the meaning of other tweets (merge similar news/events into a single entry).

    Include a tweet only if it contains at least ONE of the following:
    - Actual, market-moving news: launches, listings, hacks, partnerships, bans or permissions, regulatory decisions, major reports or lawsuits, policy changes, official investigations, etc.
    - Authoritative opinions or forecasts with specifics (well-reasoned, with data or context ‚Äî not just "bullish!").
    - Market or fundamental analysis: stats, fund flows, trend analysis, institutional activity, liquidation levels, etc.
    - Technical analysis with explanation: levels, indicators, patterns, market signals ‚Äî only if accompanied by reasoning (not just "BTC up!").
    - Important insider information confirmed by combining data or trustworthy sources.
    - Valuable educational content about crypto markets, tools, or strategies (guides, explanations, step-by-step instructions).

    OUTPUT STRUCTURE:
    (Output ONLY the sections that have at least one tweet for them. Do NOT show, mention, or write anything about empty sections.
    All section titles, headlines, and summaries must be in Russian only.)

    - –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
        - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (3-7 —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ)
        - –ö—Ä–∞—Ç–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (1-2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–≤–∏—Ç)
    - –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
        - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏ –∏ –ø–æ—á–µ–º—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É)
    - –ò–Ω—Å–∞–π–¥—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
        - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        - –ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ –∏–Ω—Å–∞–π–¥–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É)
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã:
        - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        - –ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É)
    - –û–±—É—á–µ–Ω–∏–µ:
        - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É)

    Additional requirements:
    - Headlines and summaries must not repeat (merge similar topics, combine into one summary per news item).
    - Each item must be unique and concise, with no duplication across sections.
    - Remove all "noise" ‚Äî only add events, insights, analysis, education, or trade ideas with genuine value for the market.
    - The digest must be brief, clear, and practical for traders or investors.

    The entire output must be in Russian language only, including ALL headlines, section titles and summaries.
    Do NOT add any words like "Source" or anything before the link; just put the link after summary text.  
    Output only the digest in the specified structure and nothing else.

    Here is the list of tweets to analyze (each row: url, tweet_text):

    {tweets}

    Here is the list of already covered news headlines for today (do NOT include any stories related to these):

    {covered_news}
    """
    final_prompt = prompt.format(tweets=tweets_text, covered_news=covered_news)
    return final_prompt


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª
def send_to_telegram(message, disable_preview=False):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ Telegram Bot API —Ç–æ–∫–µ–Ω–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        telegram_channel_id = os.getenv("TELEGRAM_CHANNEL_ID")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not telegram_bot_token or not telegram_channel_id:
            print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            return False

        # URL –¥–ª—è Telegram Bot API
        telegram_api_url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        max_length = 4000  # –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        if len(message) > max_length:
            parts = []
            # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
            header_match = re.search(r'<b>üî• –ö—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–∏ [^<]+</b>', message)
            header = header_match.group(0) if header_match else ""

            # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
            content = message.replace(header, "", 1) if header else message

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
            sections = re.split(r'(<b>[\W\w]+?</b>\n)', content)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            current_part = header + "\n\n" if header else ""

            for section in sections:
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
                if len(current_part) + len(section) > max_length:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                    parts.append(current_part)
                    current_part = section
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                    current_part += section

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            success = True
            for i, part in enumerate(parts):
                # –ö –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
                message_header = ""
                if len(parts) > 1:
                    message_header = f"<b>–ß–∞—Å—Ç—å {i + 1}/{len(parts)}</b>\n\n"

                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                data = {
                    "chat_id": telegram_channel_id,
                    "text": message_header + part,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": disable_preview
                }

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
                response = requests.post(telegram_api_url, data=data)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
                if response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i + 1}/{len(parts)} –≤ Telegram: {response.text}")
                    success = False

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —á–∞—Å—Ç–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                if i < len(parts) - 1:
                    time.sleep(1)

            if success:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –∫–∞–Ω–∞–ª ({len(parts)} —á–∞—Å—Ç–µ–π)")

            return success
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            data = {
                "chat_id": telegram_channel_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": disable_preview
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
            response = requests.post(telegram_api_url, data=data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –∫–∞–Ω–∞–ª")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.text}")
                return False

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
        return False


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞
API_KEY = os.getenv("GROK_API_KEY")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': os.getenv("DB_HOST"),
    'db': os.getenv("DB_NAME"),
    'user': os.getenv("DB_USER"),
    'passwd': os.getenv("DB_PASSWORD"),
    'port': int(os.getenv("DB_PORT")),
    'cursorclass': MySQLdb.cursors.DictCursor
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
conn = MySQLdb.connect(**DB_CONFIG)
cursor = conn.cursor()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–æ–¥–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
one_day_ago = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')
cursor.execute("SELECT `text_news` FROM `grok_news` WHERE `news_time` >= %s ORDER BY `news_time` DESC", (one_day_ago,))
previous_news = cursor.fetchall()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–≤–æ–¥–∫–∞–º–∏
previous_summaries = ""
for i, news in enumerate(previous_news, 1):
    previous_summaries += f"=== Previous Summary {i} ===\n{news['text_news']}\n\n"

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 20 —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —Ç–≤–∏—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ checked –Ω–µ —Ä–∞–≤–Ω–æ true (ASC —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ id)
cursor.execute(
    """
    SELECT `id`, `tweet_text`, `url`
    FROM `tweets`
    WHERE `isChecked` IS NOT TRUE
      AND LENGTH(`tweet_text`) >= 25
      AND `created_at` >= NOW() - INTERVAL 24 HOUR
    ORDER BY `tweets`.`id` DESC
        LIMIT 20;
    """)
tweets = cursor.fetchall()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –º–µ–Ω–µ–µ 20 –∑–∞–ø–∏—Å–µ–π, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if len(tweets) < 20:
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤, —á—Ç–æ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö 20. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
    cursor.close()
    conn.close()
    exit(0)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è checked
tweet_ids = [tweet['id'] for tweet in tweets]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
tweets_text = ""

print("\n=== –¢–í–ò–¢–´ –î–õ–Ø –ü–†–û–ú–ü–¢–ê ===\n")

for i, tweet in enumerate(tweets, 1):

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    tweets_text += f"--- Tweet {i} ---\nText: {tweet['tweet_text']}\nURL: {tweet['url']}\n\n"

print("\n=== –ö–û–ù–ï–¶ –°–ü–ò–°–ö–ê –¢–í–ò–¢–û–í ===\n")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è API Grok
client = OpenAI(
    api_key=API_KEY,
    base_url="https://api.x.ai/v1",
)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Grok
messages = [
    {"role": "system", "content": "You are an expert crypto market analyst specializing in filtering and summarizing critical news, insights, and trading signals. Your task is to carefully analyze tweets from top influencers and produce only concise, high-impact, market-relevant information with perfect clarity and accuracy, in Russian."},
    {"role": "user", "content": build_prompt(tweets_text, previous_summaries)},
]

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Grok —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π 0
completion = client.chat.completions.create(
    model="grok-3-latest",
    messages=messages,
    temperature=0
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Grok
response = completion.choices[0].message.content

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É grok_news
try:
    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Grok –≤ —Ç–∞–±–ª–∏—Ü—É grok_news
    insert_query = "INSERT INTO `grok_news` (`text_news`, `news_time`) VALUES (%s, %s)"
    cursor.execute(insert_query, (response, current_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ checked=true –¥–ª—è –≤—Å–µ—Ö —Ç–≤–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ Grok
    if tweet_ids:
        update_query = "UPDATE `tweets` SET `isChecked` = TRUE WHERE `id` IN ({})".format(
            ', '.join(['%s'] * len(tweet_ids)))
        cursor.execute(update_query, tweet_ids)

    conn.commit()
    print(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å timestamp: {current_time}")
    print(f"–ü–æ–º–µ—á–µ–Ω–æ {len(tweet_ids)} —Ç–≤–∏—Ç–æ–≤ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ (checked=true)")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram –∫–∞–Ω–∞–ª
    if response and len(response.strip()) > 0:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        formatted_date = datetime.datetime.now().strftime('%d.%m.%Y %H:%M')
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–º–µ—Ç–∫–æ–π
        formatted_response = format_for_telegram(response)
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∫ –Ω–∞—á–∞–ª—É —Å–æ–æ–±—â–µ–Ω–∏—è
        telegram_message = f"<b>üî• –ö—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–∏ {formatted_date}</b>\n\n{formatted_response}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        send_to_telegram(telegram_message)
    else:
        print("–û—Ç–≤–µ—Ç –æ—Ç Grok –ø—É—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

except Exception as e:
    conn.rollback()
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
print("–û—Ç–≤–µ—Ç Grok:")
print(response)

# –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.close()
conn.close()